Welcome to the Library Management System backend!
Follow these steps to get up and running and test the API routes with Postman.

1) Clone the repository
   $ git clone <your-repo-url>
   $ cd lib_mng_sys/backend

2) Set up your environment variables
   - Create a file named `.env` in the `backend` folder.
   - Add these lines (replace with your values):
     MYSQL_HOST=localhost
     MYSQL_USER=your_mysql_username
     MYSQL_PASSWORD=your_mysql_password
     MYSQL_DATABASE=dbms_shree
     MYSQL_PORT=3306
     PORT=3001
     JWT_SECRET=DBMS_Shree

3) Install dependencies
   $ npm install (both in backend and frontend)

4) Start your MySQL server
   Ensure your local MySQL is running and you can connect with the `.env` credentials.

5) Launch the backend
   $ node index.js
   (or use `nodemon index.js` if you have nodemon installed)
   You should see:
     Connected to MySQL
     Initializing database...
     üéØ‚úÖ Database initialized successfully!
     Server running on port 3001

6) Test API routes with Postman
   - Base URL: http://localhost:3001
   - Use the ‚ÄúAuthorization: Bearer <token>‚Äù header for protected routes.

   6.1 Register a student
     POST /api/students/register
     Body (JSON):
     {
       "roll_no": "STU100",
       "first_name": "Alice",
       "last_name": "Wonder",
       "email": "alice@uni.com",
       "phone": "9001234567",
       "dob": "2002-02-02",
       "password": "alicepwd"
     }
     Response: { "token": "<JWT>" }

   6.2 Login (student or librarian)
     POST /api/login
     Body (JSON):
     {
       "email": "alice@uni.com",
       "password": "alicepwd"
     }
     Response: { "token": "<JWT>" }
     Save this as your Bearer token in Postman.

   6.3 Get profile (student)
     GET /api/students/profile
     Header:
       Authorization: Bearer <token>
     Response: student details

   6.4 Create author (librarian only)
     POST /api/authors
     Header:
       Authorization: Bearer <librarianToken>
     Body (JSON):
     {
       "name": "Tolkien",
       "biography": "LOTR author",
       "nationality": "British"
     }

   6.5 List authors (public)
     GET /api/authors

   6.6 Create publisher (librarian only)
     POST /api/publishers
     Body (JSON):
     {
       "name": "Penguin",
       "location": "London",
       "contact": "+44-20-0000"
     }

   6.7 List publishers (public)
     GET /api/publishers

   6.8 Add book (librarian only)
     POST /api/books
     Body (JSON):
     {
       "isbn": "9780261103573",
       "title": "LOTR",
       "genre": "Fantasy",
       "total_copies": 4,
       "author_id": 1,
       "publisher_id": 1,
       "published_year": 1954
     }

   6.9 List books (public)
     GET /api/books

   6.10 Reserve a book (student only)
     POST /api/reservations
     Body (JSON):
       { "book_id": 1 }

   6.11 List my reservations
     GET /api/reservations

   6.12 Return a book
     POST /api/reservations/return
     Body (JSON):
       { "reservation_id": 1 }

   6.13 Create fine (librarian only)
     POST /api/fines
     Body (JSON):
     {
       "roll_no": "STU100",
       "amount": 10.00,
       "reason": "Overdue"
     }

   6.14 View my fines
     GET /api/fines

   6.15 Pay a fine
     POST /api/fines/pay
     Body (JSON):
       { "fine_id": 1 }

   6.16 Create GD room (librarian only)
     POST /api/gd/rooms
     Body (JSON):
       { "room_name": "GD A", "capacity": 6 }

   6.17 List GD rooms
     GET /api/gd/rooms

   6.18 Reserve GD room (student only)
     POST /api/gd
     Body (JSON):
     {
       "room_id": 1,
       "reservation_time": "2025-04-27T10:00:00Z",
       "duration_minutes": 60
     }

   6.19 List my GD reservations
     GET /api/gd

   6.20 Cancel GD reservation
     DELETE /api/gd/1

Enjoy building the frontend! If you hit any issues, just let me know.
